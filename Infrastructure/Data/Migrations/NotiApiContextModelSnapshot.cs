// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(NotiApiContext))]
    partial class NotiApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Block.Auditor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("ActionDes")
                        .HasColumnType("long");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("auditor", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Block.BlockChain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GeneratedHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdAuditorFk")
                        .HasColumnType("int");

                    b.Property<int>("IdNotiRespFk")
                        .HasColumnType("int");

                    b.Property<int>("IdNotiTypeFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdAuditorFk");

                    b.HasIndex("IdNotiRespFk");

                    b.HasIndex("IdNotiTypeFk");

                    b.ToTable("blockchain", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Notifications.FiledNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("filednumber", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Notifications.Formats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("formats", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdFiledNumFk")
                        .HasColumnType("int");

                    b.Property<int>("IdFotmatFk")
                        .HasColumnType("int");

                    b.Property<int>("IdNotiResFk")
                        .HasColumnType("int");

                    b.Property<int>("IdNotiStatusFk")
                        .HasColumnType("int");

                    b.Property<int>("IdNotiTypeFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRequiTypeFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotiSubject")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("IdFiledNumFk");

                    b.HasIndex("IdFotmatFk");

                    b.HasIndex("IdNotiResFk");

                    b.HasIndex("IdNotiStatusFk");

                    b.HasIndex("IdNotiTypeFk");

                    b.HasIndex("IdRequiTypeFk");

                    b.ToTable("notificationmodule", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("notificactionresponse", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("notificationstatus", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("notificationtype", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Notifications.RequirementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("requirementtype", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Person.GenericPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("genericpermissions", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Person.GenericSubModules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdGenePermiFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTeacSubModuFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdGenePermiFk");

                    b.HasIndex("IdRolFk");

                    b.HasIndex("IdTeacSubModuFk");

                    b.ToTable("genericsubmodules", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Person.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Person.RolTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTecherModuFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdRolFk");

                    b.HasIndex("IdTecherModuFk");

                    b.ToTable("rolteacher", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Person.SubModules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("submodules", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Person.TeacherModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("teachermodule", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Person.TeacherSubModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdSubModulesFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTeacherModuFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdSubModulesFk");

                    b.HasIndex("IdTeacherModuFk");

                    b.ToTable("teachersubmodule", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Block.BlockChain", b =>
                {
                    b.HasOne("Core.Entities.Block.Auditor", "Auditors")
                        .WithMany("BlockChains")
                        .HasForeignKey("IdAuditorFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Notifications.NotificationResponse", "NotiResponses")
                        .WithMany("BlockChains")
                        .HasForeignKey("IdNotiRespFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Notifications.NotificationType", "NotiTypes")
                        .WithMany("BlockChains")
                        .HasForeignKey("IdNotiTypeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditors");

                    b.Navigation("NotiResponses");

                    b.Navigation("NotiTypes");
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationModule", b =>
                {
                    b.HasOne("Core.Entities.Notifications.FiledNumber", "FiledNumbers")
                        .WithMany("NotiModules")
                        .HasForeignKey("IdFiledNumFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Notifications.Formats", "Formats")
                        .WithMany("NotiModules")
                        .HasForeignKey("IdFotmatFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Notifications.NotificationResponse", "NotiResponses")
                        .WithMany("NotiModules")
                        .HasForeignKey("IdNotiResFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Notifications.NotificationStatus", "NotiStatus")
                        .WithMany("NotiModules")
                        .HasForeignKey("IdNotiStatusFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Notifications.NotificationType", "NotiTypes")
                        .WithMany("NotiModules")
                        .HasForeignKey("IdNotiTypeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Notifications.RequirementType", "RequiTypes")
                        .WithMany("NotiModules")
                        .HasForeignKey("IdRequiTypeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FiledNumbers");

                    b.Navigation("Formats");

                    b.Navigation("NotiResponses");

                    b.Navigation("NotiStatus");

                    b.Navigation("NotiTypes");

                    b.Navigation("RequiTypes");
                });

            modelBuilder.Entity("Core.Entities.Person.GenericSubModules", b =>
                {
                    b.HasOne("Core.Entities.Person.GenericPermissions", "GenericPermissionss")
                        .WithMany("GenericSubModules")
                        .HasForeignKey("IdGenePermiFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Person.Rol", "Rols")
                        .WithMany("GenericSubModules")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Person.TeacherSubModule", "TeacherSubModules")
                        .WithMany("GenericSubModules")
                        .HasForeignKey("IdTeacSubModuFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenericPermissionss");

                    b.Navigation("Rols");

                    b.Navigation("TeacherSubModules");
                });

            modelBuilder.Entity("Core.Entities.Person.RolTeacher", b =>
                {
                    b.HasOne("Core.Entities.Person.Rol", "Rols")
                        .WithMany("RolTeachers")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Person.TeacherModule", "TeacherModules")
                        .WithMany("RolTeachers")
                        .HasForeignKey("IdTecherModuFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rols");

                    b.Navigation("TeacherModules");
                });

            modelBuilder.Entity("Core.Entities.Person.TeacherSubModule", b =>
                {
                    b.HasOne("Core.Entities.Person.SubModules", "SubModules")
                        .WithMany("TeacherSubModules")
                        .HasForeignKey("IdSubModulesFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Person.TeacherModule", "TeacherModules")
                        .WithMany("TeacherSubModules")
                        .HasForeignKey("IdTeacherModuFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubModules");

                    b.Navigation("TeacherModules");
                });

            modelBuilder.Entity("Core.Entities.Block.Auditor", b =>
                {
                    b.Navigation("BlockChains");
                });

            modelBuilder.Entity("Core.Entities.Notifications.FiledNumber", b =>
                {
                    b.Navigation("NotiModules");
                });

            modelBuilder.Entity("Core.Entities.Notifications.Formats", b =>
                {
                    b.Navigation("NotiModules");
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationResponse", b =>
                {
                    b.Navigation("BlockChains");

                    b.Navigation("NotiModules");
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationStatus", b =>
                {
                    b.Navigation("NotiModules");
                });

            modelBuilder.Entity("Core.Entities.Notifications.NotificationType", b =>
                {
                    b.Navigation("BlockChains");

                    b.Navigation("NotiModules");
                });

            modelBuilder.Entity("Core.Entities.Notifications.RequirementType", b =>
                {
                    b.Navigation("NotiModules");
                });

            modelBuilder.Entity("Core.Entities.Person.GenericPermissions", b =>
                {
                    b.Navigation("GenericSubModules");
                });

            modelBuilder.Entity("Core.Entities.Person.Rol", b =>
                {
                    b.Navigation("GenericSubModules");

                    b.Navigation("RolTeachers");
                });

            modelBuilder.Entity("Core.Entities.Person.SubModules", b =>
                {
                    b.Navigation("TeacherSubModules");
                });

            modelBuilder.Entity("Core.Entities.Person.TeacherModule", b =>
                {
                    b.Navigation("RolTeachers");

                    b.Navigation("TeacherSubModules");
                });

            modelBuilder.Entity("Core.Entities.Person.TeacherSubModule", b =>
                {
                    b.Navigation("GenericSubModules");
                });
#pragma warning restore 612, 618
        }
    }
}
